// <auto-generated />
using System;
using Factory.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Factory.DAL.Migrations
{
    [DbContext(typeof(FactDdContext))]
    [Migration("20250321145636_Add SeedDate in Employees submodule")]
    partial class AddSeedDateinEmployeessubmodule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Factory.DAL.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteRequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompletedTour")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMFAEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastBackupDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Factory.DAL.Models.Documentation.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Documentation");
                });

            modelBuilder.Entity("Factory.DAL.Models.Finance.FinancialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_FinancialRecords_Date");

                    b.ToTable("FinancialRecords", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Departments", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("Employees", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Offboarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccessRevocationCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("BenefitsTerminationCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("ExitInterviewCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExitInterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FarewellEventCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("FeedbackProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("FinalPaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("KnowledgeTransferCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastWorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("NoticeGivenDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReferenceArrangementCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ReturnOfCompanyPropertyCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("TerminationReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Offboardings", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Onboarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("EquipmentProvidedCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FeedbackSessionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAssignmentCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IntroductionToTeamCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("OrientationCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PoliciesReviewedCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemAccessCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("TrainingCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WorkspaceSetupCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Onboardings", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CommunicationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DevelopmentPlan")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmployeeFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("GoalsForNextPeriod")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("InitiativeScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ManagerFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("OverallScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductivityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QualityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TeamworkScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Performances", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Supervisors", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AgentEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AgentPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGarage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPool")
                        .HasColumnType("bit");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LinkedInLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YouTubeLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Factory.DAL.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccessGranted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailSetup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HardwareProvisioned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftwareInstalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("ITSetupModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompanyOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepartmentOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstWeekCheckInCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("MentorAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("OrientationModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BackgroundCheckCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ContractSigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("DocumentsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("WelcomeEmailSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("PreboardingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ComplianceTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SecurityTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SkillsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SystemsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("TrainingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("JobNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<string>("SelectedMachines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalSQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveredBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("SQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepHeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepWidth")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconClass = "bi-people",
                            IsActive = true,
                            Name = "User Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            IconClass = "bi-person-badge",
                            IsActive = true,
                            Name = "Role Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            IconClass = "bi-box-seam",
                            IsActive = true,
                            Name = "Inventory Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "bi-cart",
                            IsActive = true,
                            Name = "Order Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "bi-cash-stack",
                            IsActive = true,
                            Name = "Payroll Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "bi-speedometer",
                            IsActive = true,
                            Name = "System Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "bi-headset",
                            IsActive = true,
                            Name = "Support Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            IconClass = "bi-file-earmark-bar-graph",
                            IsActive = true,
                            Name = "Reports",
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            IconClass = "bi-gear",
                            IsActive = true,
                            Name = "Settings",
                            Url = ""
                        },
                        new
                        {
                            Id = 10,
                            IconClass = "bi-people",
                            IsActive = true,
                            Name = "HR",
                            Url = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecureUrlKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmoduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmoduleId");

                    b.ToTable("Pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Permission List",
                            SecureUrlKey = "319755b9e97646efbc7a91d36c29d550",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Action = "AssignPermissions",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Assign Permission",
                            SecureUrlKey = "0e257a400c0d4c74b4bee6930c644cb7",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Module List",
                            SecureUrlKey = "a1f2c1d2e0894e89bee68d22c4565a22",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Action = "Create",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Add Module",
                            SecureUrlKey = "15777ff6148a487082af912c88a458bf",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Submodule List",
                            SecureUrlKey = "00553e5c1fda45c288f140402983c2a1",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Add Submodule",
                            SecureUrlKey = "0ae6e80b20824992b923f6159f153fab",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 7,
                            Action = "Index",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "User List",
                            SecureUrlKey = "f01a30333cce42fea654d8b18ff51b7d",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Action = "Add",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "Add User",
                            SecureUrlKey = "bfafacff3bf34db1ae56b2d6ca113240",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Action = "Index",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Role List",
                            SecureUrlKey = "fb4084ff3d934ef68703124fe7dc8ed8",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Add Role",
                            SecureUrlKey = "9d7e128e6768429495293273a550aba6",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 11,
                            Action = "Index",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Warehouse List",
                            SecureUrlKey = "efe725458a8d4167ac903188cd7d965a",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 12,
                            Action = "Create",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Add Warehouse",
                            SecureUrlKey = "44d50668cc6b4062bc18c0de08d04bc7",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 13,
                            Action = "List",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Item List",
                            SecureUrlKey = "8f9bd8fdb675430ea09c30f66bc6d00f",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 14,
                            Action = "AddItem",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Add Item",
                            SecureUrlKey = "47e22697577e4489a5d268a2431a9aca",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 15,
                            Action = "Create",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Create Order",
                            SecureUrlKey = "8b904e2eae69499fb6591f73c261fca3",
                            SubmoduleId = 7
                        },
                        new
                        {
                            Id = 16,
                            Action = "Index",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Order List",
                            SecureUrlKey = "8e6479d2fa91458c89a950614fc0d77f",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 17,
                            Action = "General",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "General Settings",
                            SecureUrlKey = "e137b8ead4624382a2e78a0b7850d20d",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 18,
                            Action = "Security",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "Security Settings",
                            SecureUrlKey = "8fe944b658f8459395f25800925d1f56",
                            SubmoduleId = 18
                        },
                        new
                        {
                            Id = 19,
                            Action = "Index",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Dashboard",
                            SecureUrlKey = "2b0fa83ca7ad411188eb4367feb6f58e",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 20,
                            Action = "EmployeeSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Employee Salaries",
                            SecureUrlKey = "3841ef11ebf6423c87a827b9744e2b66",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 21,
                            Action = "ProcessSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Salary Processing",
                            SecureUrlKey = "b76ab5b6633243cba573cd88c7f711d4",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 22,
                            Action = "Reports",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Reports",
                            SecureUrlKey = "23a13948d5d84fcab0372e423114de07",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 23,
                            Action = "Bonuses",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Bonuses Management",
                            SecureUrlKey = "d4c28235a253435ab54b78979447c47f",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 24,
                            Action = "Deductions",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Deductions",
                            SecureUrlKey = "c1c8c7f9caa94653b7999ceb88a2e760",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 25,
                            Action = "Tax",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Tax Calculations",
                            SecureUrlKey = "42f82e2860b34347b301921c9c5632d3",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 26,
                            Action = "GeneratePayslip",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payslip Generation",
                            SecureUrlKey = "28294e726d074dd9ac95aa46a039b680",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 27,
                            Action = "Overtime",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Overtime Payments",
                            SecureUrlKey = "b86c4f0054e740eabace13567b8d86be",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 28,
                            Action = "History",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll History",
                            SecureUrlKey = "da924136ff594a97868b44b34092fa42",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 29,
                            Action = "Index",
                            Controller = "Accountant",
                            IsActive = true,
                            Name = "Financial Orders",
                            SecureUrlKey = "b80859d4581d4b2ca4b271949d84689b",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 30,
                            Action = "PreOnboarding",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Pre-Onboarding",
                            SecureUrlKey = "d6928c4783cb4e92b8865dab787510f8",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 31,
                            Action = "ITSetup",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "IT Setup",
                            SecureUrlKey = "4ac104423702426ab83de27354b3fde8",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 32,
                            Action = "Training",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Training & Orientation",
                            SecureUrlKey = "2d135a7382cd4352811204b664234de5",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 33,
                            Action = "Clearance",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Exit Clearance",
                            SecureUrlKey = "0fc7d57480d045e7842406c6e901231a",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 34,
                            Action = "RevokeAccess",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Access Revocation",
                            SecureUrlKey = "f1faad22c90d4a0db3c99ca377560097",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 35,
                            Action = "FinalPayroll",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Final Payroll & Documents",
                            SecureUrlKey = "4b10fc53b2114d81bafde702458fbad6",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 36,
                            Action = "Records",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Employee Records",
                            SecureUrlKey = "4340ba6002c44378811d7cf651919ef5",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 37,
                            Action = "Leave",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Leave Management",
                            SecureUrlKey = "d8036287c11e4f74992c1417602ea410",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 38,
                            Action = "Payroll",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Payroll Processing",
                            SecureUrlKey = "c3f1736510e547419157ab80f4d6389e",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 39,
                            Action = "Reviews",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Performance Reviews",
                            SecureUrlKey = "c874ecb59b584968b0eaf0aa85e26f04",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 40,
                            Action = "KPIs",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "KPI Tracking",
                            SecureUrlKey = "0dbfaf89f05c433fa9f7cb22aca570b4",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 41,
                            Action = "Feedback",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Feedback & Recognition",
                            SecureUrlKey = "13311f94d935452db02f17abd8e3ed53",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 42,
                            Action = "Tickets",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Ticket Management",
                            SecureUrlKey = "d3797b12355d44baa46b0aa9f5804a3b",
                            SubmoduleId = 11
                        },
                        new
                        {
                            Id = 43,
                            Action = "Monitoring",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "System Monitoring",
                            SecureUrlKey = "71645711bb1146bc92ad10c9117d2f5d",
                            SubmoduleId = 12
                        },
                        new
                        {
                            Id = 44,
                            Action = "Inventory",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Hardware Inventory",
                            SecureUrlKey = "5d7e54bad781443fb3f97c00a23b7651",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 45,
                            Action = "Tickets",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Tickets",
                            SecureUrlKey = "4c031d965929497f9503d2b8a09211c9",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 46,
                            Action = "Chat",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Live Chat",
                            SecureUrlKey = "7888054b38b04e2495671e98352a65f2",
                            SubmoduleId = 14
                        },
                        new
                        {
                            Id = 47,
                            Action = "FAQ",
                            Controller = "Support",
                            IsActive = true,
                            Name = "FAQ & Help Center",
                            SecureUrlKey = "e1bc356d43b6404a989ee2b8f1f035e0",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 48,
                            Action = "Finance",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Financial Reports",
                            SecureUrlKey = "acd24cc075a44ba1915a21852ffe95ae",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 49,
                            Action = "Employees",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Employee Insights",
                            SecureUrlKey = "a4926fa3f67f4a98a9abbcfa3ac346dd",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 50,
                            Action = "Sales",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Sales & Revenue",
                            SecureUrlKey = "7ebeb27ce0664bf8a72588852626076d",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 51,
                            Action = "Index",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Dashboard",
                            SecureUrlKey = "856e53fb445a49029f4151e6f3ec3221",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 52,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Orders Dashboard",
                            SecureUrlKey = "e9783deac45a4438adb6699ea31dcdc7",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 53,
                            Action = "Settings",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Management",
                            SecureUrlKey = "7d15602994cb47bf8298c9da941f1439",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 54,
                            Action = "Export",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Export",
                            SecureUrlKey = "e610e55cd4be42d1abbd7637a0c44304",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 55,
                            Action = "Import",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Import",
                            SecureUrlKey = "389d1d757aa241ec8bdefc0e2c2d9ee0",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 56,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Order Dashboard",
                            SecureUrlKey = "5cc8a51bb10441de9921eadd77a962a4",
                            SubmoduleId = 16
                        },
                        new
                        {
                            Id = 57,
                            Action = "WarehouseReport",
                            Controller = "warehouse",
                            IsActive = true,
                            Name = "Stores",
                            SecureUrlKey = "7e620c318e1f45eebc2facd76c8386ac",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 58,
                            Action = "Index",
                            Controller = "Country",
                            IsActive = true,
                            Name = "Countries",
                            SecureUrlKey = "64712ebe85ea423b96d9e2b30fb3f446",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 59,
                            Action = "countries",
                            Controller = "items",
                            IsActive = true,
                            Name = "Countries and Their Items",
                            SecureUrlKey = "ecec438274e24587a6594fc462eb00c6",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 60,
                            Action = "Index",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Onboarding List",
                            SecureUrlKey = "5de9198157e2405d96b8e4264771a596",
                            SubmoduleId = 19
                        },
                        new
                        {
                            Id = 61,
                            Action = "Create",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Create Onboarding",
                            SecureUrlKey = "abfc9445abd6466aa02901ff627cb964",
                            SubmoduleId = 19
                        },
                        new
                        {
                            Id = 62,
                            Action = "Index",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Offboarding List",
                            SecureUrlKey = "89ccc3736c2e46698044beb1b8bd524f",
                            SubmoduleId = 20
                        },
                        new
                        {
                            Id = 63,
                            Action = "Create",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Create Offboarding",
                            SecureUrlKey = "c2c0c011ef6444c7afdda7eb38e0fd27",
                            SubmoduleId = 20
                        },
                        new
                        {
                            Id = 64,
                            Action = "Index",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Performance Reviews",
                            SecureUrlKey = "7c22c64fa89346dcbec301b03fe76e51",
                            SubmoduleId = 21
                        },
                        new
                        {
                            Id = 65,
                            Action = "Create",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Add Performance Review",
                            SecureUrlKey = "e80da602e3b24825906999307151d413",
                            SubmoduleId = 21
                        },
                        new
                        {
                            Id = 66,
                            Action = "Index",
                            Controller = "Supervisor",
                            IsActive = true,
                            Name = "Supervisors List",
                            SecureUrlKey = "2072d12b93bb444b82c27a4ac31d69bb",
                            SubmoduleId = 22
                        },
                        new
                        {
                            Id = 67,
                            Action = "Create",
                            Controller = "Supervisor",
                            IsActive = true,
                            Name = "Add Supervisor",
                            SecureUrlKey = "ac26e0e6aa3f4660be99f4770fbe2178",
                            SubmoduleId = 22
                        },
                        new
                        {
                            Id = 68,
                            Action = "Index",
                            Controller = "Position",
                            IsActive = true,
                            Name = "Employee Positions",
                            SecureUrlKey = "7f66fd319e8f4094b8e67d408c1dc0bd",
                            SubmoduleId = 23
                        },
                        new
                        {
                            Id = 69,
                            Action = "Create",
                            Controller = "Position",
                            IsActive = true,
                            Name = "Create Employee Position",
                            SecureUrlKey = "a3385755bcda49fb9d392c8bf519756d",
                            SubmoduleId = 23
                        },
                        new
                        {
                            Id = 70,
                            Action = "Index",
                            Controller = "Department",
                            IsActive = true,
                            Name = "Departments List",
                            SecureUrlKey = "9331c7fea8fa43a4970ddfdb16ab0aae",
                            SubmoduleId = 24
                        },
                        new
                        {
                            Id = 71,
                            Action = "Create",
                            Controller = "Department",
                            IsActive = true,
                            Name = "Add Department",
                            SecureUrlKey = "031588d96d534ea382fffa8c595609c1",
                            SubmoduleId = 24
                        },
                        new
                        {
                            Id = 72,
                            Action = "Index",
                            Controller = "LeaveRequest",
                            IsActive = true,
                            Name = "Leave Requests",
                            SecureUrlKey = "3d37866eae324024ba0da0eaefefb532",
                            SubmoduleId = 25
                        },
                        new
                        {
                            Id = 73,
                            Action = "Create",
                            Controller = "LeaveRequest",
                            IsActive = true,
                            Name = "Submit Leave Request",
                            SecureUrlKey = "8d1a16ebfd69420ead96b6f4278d0072",
                            SubmoduleId = 25
                        },
                        new
                        {
                            Id = 74,
                            Action = "Index",
                            Controller = "Employee",
                            IsActive = true,
                            Name = "Employee List",
                            SecureUrlKey = "4debffbb3c7d4edd84454f546181adfb",
                            SubmoduleId = 26
                        },
                        new
                        {
                            Id = 75,
                            Action = "Create",
                            Controller = "Employee",
                            IsActive = true,
                            Name = "Add Employee",
                            SecureUrlKey = "4fba1b1bb6234cc2a00ae048f036e152",
                            SubmoduleId = 26
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTyepe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-people",
                            ModuleId = 1,
                            Name = "Users",
                            Title = ""
                        },
                        new
                        {
                            Id = 2,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield-lock",
                            ModuleId = 1,
                            Name = "Permissions",
                            Title = ""
                        },
                        new
                        {
                            Id = 3,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-badge",
                            ModuleId = 2,
                            Name = "Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 4,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-check",
                            ModuleId = 2,
                            Name = "Assign Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 5,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-box-seam",
                            ModuleId = 3,
                            Name = "Inventory",
                            Title = ""
                        },
                        new
                        {
                            Id = 6,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-boxes",
                            ModuleId = 3,
                            Name = "Stock Levels",
                            Title = ""
                        },
                        new
                        {
                            Id = 7,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-plus",
                            ModuleId = 4,
                            Name = "New Order",
                            Title = ""
                        },
                        new
                        {
                            Id = 8,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-check",
                            ModuleId = 4,
                            Name = "Order History",
                            Title = ""
                        },
                        new
                        {
                            Id = 9,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cash-stack",
                            ModuleId = 5,
                            Name = "Payroll Dashboard",
                            Title = ""
                        },
                        new
                        {
                            Id = 10,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-person",
                            ModuleId = 5,
                            Name = "Employee Records",
                            Title = ""
                        },
                        new
                        {
                            Id = 11,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-ticket-detailed",
                            ModuleId = 6,
                            Name = "Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 12,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer",
                            ModuleId = 6,
                            Name = "System Monitoring",
                            Title = ""
                        },
                        new
                        {
                            Id = 13,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-headset",
                            ModuleId = 7,
                            Name = "Support Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 14,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-chat-dots",
                            ModuleId = 7,
                            Name = "Live Chat",
                            Title = ""
                        },
                        new
                        {
                            Id = 15,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-bar-graph",
                            ModuleId = 8,
                            Name = "Reports",
                            Title = ""
                        },
                        new
                        {
                            Id = 16,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer2",
                            ModuleId = 8,
                            Name = "Dashboards",
                            Title = ""
                        },
                        new
                        {
                            Id = 17,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-gear",
                            ModuleId = 9,
                            Name = "General Settings",
                            Title = ""
                        },
                        new
                        {
                            Id = 18,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield",
                            ModuleId = 9,
                            Name = "Security",
                            Title = ""
                        },
                        new
                        {
                            Id = 19,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-plus",
                            ModuleId = 10,
                            Name = "Onboarding",
                            Title = ""
                        },
                        new
                        {
                            Id = 20,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-dash",
                            ModuleId = 10,
                            Name = "Offboarding",
                            Title = ""
                        },
                        new
                        {
                            Id = 21,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-bar-chart-line",
                            ModuleId = 10,
                            Name = "Performance",
                            Title = ""
                        },
                        new
                        {
                            Id = 22,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-badge",
                            ModuleId = 10,
                            Name = "Supervisor",
                            Title = ""
                        },
                        new
                        {
                            Id = 23,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-briefcase",
                            ModuleId = 10,
                            Name = "Employee Position",
                            Title = ""
                        },
                        new
                        {
                            Id = 24,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-building",
                            ModuleId = 10,
                            Name = "Department",
                            Title = ""
                        },
                        new
                        {
                            Id = 25,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-calendar-check",
                            ModuleId = 10,
                            Name = "Leave Request",
                            Title = ""
                        },
                        new
                        {
                            Id = 26,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-people",
                            ModuleId = 10,
                            Name = "Employees",
                            Title = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ContractSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ExportImportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowNullValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CsvDelimiter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue(",");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("yyyy-MM-dd");

                    b.Property<string>("DefaultExportFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("XLSX");

                    b.Property<bool>("EnableExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IncludeHeaders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxExportRows")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000);

                    b.Property<int>("MaxImportFileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10485760);

                    b.Property<string>("SupportedExportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedImportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ValidateImportData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("ExportImportSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EnableEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnablePushNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableSmsNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UnhelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FAQS");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RespondedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SupportTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RespondedByUserId");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportResponse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Medium");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Open");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("General");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("DefaultHeight")
                        .HasColumnType("float");

                    b.Property<double?>("DefaultThickness")
                        .HasColumnType("float");

                    b.Property<double?>("DefaultWidth")
                        .HasColumnType("float");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GlassType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("HasDimensions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Clear");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLaminated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsToughened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManufacturingCountryId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rank")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("Rank");

                    b.Property<double>("Thickness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(4.0);

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Piece");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturingCountryId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("MainWarehouses", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("SubWarehouses", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.LeaveRequest", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Offboarding", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Onboarding", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Performance", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("ITSetup")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.ITSetupModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Orientation")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.OrientationModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Preboarding")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.PreboardingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Training")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.TrainingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.HasOne("Factory.DAL.Models.OrderList.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.SubModule", "Submodule")
                        .WithMany("Pages")
                        .HasForeignKey("SubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submodule");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Permission.PermissionTyepe", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "RespondedByUser")
                        .WithMany()
                        .HasForeignKey("RespondedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Factory.DAL.Models.Support.SupportTicket", "SupportTicket")
                        .WithMany("Responses")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RespondedByUser");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("Categories")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Country", "ManufacturingCountry")
                        .WithMany()
                        .HasForeignKey("ManufacturingCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ManufacturingCountry");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("SubWarehouses")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Navigation("ITSetup")
                        .IsRequired();

                    b.Navigation("Orientation")
                        .IsRequired();

                    b.Navigation("Preboarding")
                        .IsRequired();

                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("SubWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
