// <auto-generated />
using System;
using Factory.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Factory.DAL.Migrations
{
    [DbContext(typeof(FactDdContext))]
    [Migration("20250323212706_Add some pages into notification module")]
    partial class Addsomepagesintonotificationmodule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Factory.DAL.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteRequestedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompletedTour")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMFAEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastBackupDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Factory.DAL.Models.Documentation.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Documentation");
                });

            modelBuilder.Entity("Factory.DAL.Models.Finance.FinancialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_FinancialRecords_Date");

                    b.ToTable("FinancialRecords", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Departments", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("Employees", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Offboarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccessRevocationCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("BenefitsTerminationCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("ExitInterviewCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExitInterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FarewellEventCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("FeedbackProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("FinalPaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("KnowledgeTransferCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastWorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("NoticeGivenDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReferenceArrangementCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("ReturnOfCompanyPropertyCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<string>("TerminationReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Offboardings", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Onboarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("EquipmentProvidedCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FeedbackSessionCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstAssignmentCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IntroductionToTeamCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("OrientationCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PoliciesReviewedCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<bool>("SystemAccessCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("TrainingCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WorkspaceSetupCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Onboardings", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CommunicationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DevelopmentPlan")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmployeeFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("GoalsForNextPeriod")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("InitiativeScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ManagerFeedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("OverallScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductivityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QualityScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TeamworkScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Performances", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Supervisors", "HR");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Partners", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AgentEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AgentPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGarage")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPool")
                        .HasColumnType("bit");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhotoUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SquareFootage")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Factory.DAL.Models.Home.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LinkedInLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YouTubeLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Factory.DAL.Models.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AccessGranted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EmailSetup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("HardwareProvisioned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftwareInstalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("ITSetupModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompanyOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DepartmentOrientationCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstWeekCheckInCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("MentorAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("OrientationModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BackgroundCheckCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ContractSigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("DocumentsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("WelcomeEmailSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("PreboardingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ComplianceTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OnboardingProcessId")
                        .HasColumnType("int");

                    b.Property<bool>("SecurityTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SkillsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("SystemsTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("OnboardingProcessId")
                        .IsUnique();

                    b.ToTable("TrainingModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("JobNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<string>("SelectedMachines")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalSQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveredBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Height")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Rank")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("SQM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepHeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double?>("StepWidth")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("TotalLM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<double>("Width")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Modules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconClass = "bi-people",
                            IsActive = true,
                            Name = "User Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 2,
                            IconClass = "bi-person-badge",
                            IsActive = true,
                            Name = "Role Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 3,
                            IconClass = "bi-box-seam",
                            IsActive = true,
                            Name = "Inventory Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "bi-cart",
                            IsActive = true,
                            Name = "Order Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "bi-cash-stack",
                            IsActive = true,
                            Name = "Payroll Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "bi-speedometer",
                            IsActive = true,
                            Name = "System Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "bi-headset",
                            IsActive = true,
                            Name = "Support Management",
                            Url = ""
                        },
                        new
                        {
                            Id = 8,
                            IconClass = "bi-file-earmark-bar-graph",
                            IsActive = true,
                            Name = "Reports",
                            Url = ""
                        },
                        new
                        {
                            Id = 9,
                            IconClass = "bi-gear",
                            IsActive = true,
                            Name = "Settings",
                            Url = ""
                        },
                        new
                        {
                            Id = 10,
                            IconClass = "bi-people",
                            IsActive = true,
                            Name = "HR",
                            Url = ""
                        },
                        new
                        {
                            Id = 11,
                            IconClass = "bi-bell",
                            IsActive = true,
                            Name = "Notifications",
                            Url = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecureUrlKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubmoduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmoduleId");

                    b.ToTable("Pages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Index",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Permission List",
                            SecureUrlKey = "e1dd8fd821fe4e3d9332be20c8ed07cf",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Action = "AssignPermissions",
                            Controller = "PermissionManagement",
                            IsActive = true,
                            Name = "Assign Permission",
                            SecureUrlKey = "f210f8518d1a4ff385b52e8b6be07d23",
                            SubmoduleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Module List",
                            SecureUrlKey = "7543443928c24fa2ba6788f64119bea6",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Action = "Create",
                            Controller = "Module",
                            IsActive = true,
                            Name = "Add Module",
                            SecureUrlKey = "be154e5964a04ca8ac45d9ca81514907",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 5,
                            Action = "Index",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Submodule List",
                            SecureUrlKey = "eb8ae70169fa491c8372a8069e7ddcec",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            Controller = "SubModule",
                            IsActive = true,
                            Name = "Add Submodule",
                            SecureUrlKey = "002a3a828ef442e3aa6cf838f7538ad8",
                            SubmoduleId = 4
                        },
                        new
                        {
                            Id = 7,
                            Action = "Index",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "User List",
                            SecureUrlKey = "a00177c2497347af91b3bfff54bef9b2",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Action = "Add",
                            Controller = "Auth",
                            IsActive = true,
                            Name = "Add User",
                            SecureUrlKey = "f22bd8eb6e5a41ac984eaddcac0499be",
                            SubmoduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Action = "Index",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Role List",
                            SecureUrlKey = "54834fb79b684877a06c1ce5d4318389",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            Controller = "Role",
                            IsActive = true,
                            Name = "Add Role",
                            SecureUrlKey = "4e3232044cc64cecbd3e5abf1a4cc586",
                            SubmoduleId = 3
                        },
                        new
                        {
                            Id = 11,
                            Action = "Index",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Warehouse List",
                            SecureUrlKey = "5e6414ad468b40a6b67f9c1d56c3d218",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 12,
                            Action = "Create",
                            Controller = "Warehouse",
                            IsActive = true,
                            Name = "Add Warehouse",
                            SecureUrlKey = "9f857309b9514515b05721d422fd65de",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 13,
                            Action = "List",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Item List",
                            SecureUrlKey = "48226b366ec94c25820caf601d93f1b7",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 14,
                            Action = "AddItem",
                            Controller = "Item",
                            IsActive = true,
                            Name = "Add Item",
                            SecureUrlKey = "8b1f6ff03bc942789ca13f16b2895d57",
                            SubmoduleId = 6
                        },
                        new
                        {
                            Id = 15,
                            Action = "Create",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Create Order",
                            SecureUrlKey = "40ca9addc6ae47b3906ad08b3a73d701",
                            SubmoduleId = 7
                        },
                        new
                        {
                            Id = 16,
                            Action = "Index",
                            Controller = "Order",
                            IsActive = true,
                            Name = "Order List",
                            SecureUrlKey = "e0345587e942405886c9f80501b3a252",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 17,
                            Action = "General",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "General Settings",
                            SecureUrlKey = "da49d9673c6d4fd19b113e59ead29263",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 18,
                            Action = "Security",
                            Controller = "Settings",
                            IsActive = true,
                            Name = "Security Settings",
                            SecureUrlKey = "7d8fe43ec4644d0591f8a0809b432332",
                            SubmoduleId = 18
                        },
                        new
                        {
                            Id = 19,
                            Action = "Index",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Dashboard",
                            SecureUrlKey = "eef8afde864a49839c94b3a43b91584c",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 20,
                            Action = "EmployeeSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Employee Salaries",
                            SecureUrlKey = "844f8a34666c4ab2b5b6e35c1ab4508a",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 21,
                            Action = "ProcessSalaries",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Salary Processing",
                            SecureUrlKey = "0754e9f549ef48c88da22d1ed29b6106",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 22,
                            Action = "Reports",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll Reports",
                            SecureUrlKey = "cdf0887c2cc741f28722da5fe8e81693",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 23,
                            Action = "Bonuses",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Bonuses Management",
                            SecureUrlKey = "8e9f310be1664cb7a6eb83c16b0d8183",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 24,
                            Action = "Deductions",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Deductions",
                            SecureUrlKey = "a1a191c661104d1c9c96221a4aa4b8c4",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 25,
                            Action = "Tax",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Tax Calculations",
                            SecureUrlKey = "b0ae741e2b674e1b981bfba13e2f03a9",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 26,
                            Action = "GeneratePayslip",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payslip Generation",
                            SecureUrlKey = "b99565868a2d447c803ead00bdaaec3d",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 27,
                            Action = "Overtime",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Overtime Payments",
                            SecureUrlKey = "c9f28c4f8c1a4e6abe69d710b9f8e6fa",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 28,
                            Action = "History",
                            Controller = "Payroll",
                            IsActive = true,
                            Name = "Payroll History",
                            SecureUrlKey = "ea3f8ddea159499c9111d5841c1ffe00",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 29,
                            Action = "Index",
                            Controller = "Accountant",
                            IsActive = true,
                            Name = "Financial Orders",
                            SecureUrlKey = "13c9ebb2471145acbc229756aaa0ca8b",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 30,
                            Action = "PreOnboarding",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Pre-Onboarding",
                            SecureUrlKey = "70c43cd2b4c44e9cb52fd847afece67d",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 31,
                            Action = "ITSetup",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "IT Setup",
                            SecureUrlKey = "d1c4399256e94ae29723a59fce276bc8",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 32,
                            Action = "Training",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Training & Orientation",
                            SecureUrlKey = "2cef57b83391494da3cb9af8b84256ca",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 33,
                            Action = "Clearance",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Exit Clearance",
                            SecureUrlKey = "575cc93846bf46e6b23d0bd52c6e9567",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 34,
                            Action = "RevokeAccess",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Access Revocation",
                            SecureUrlKey = "5542a606f4bb48c5af6ed5eaed425615",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 35,
                            Action = "FinalPayroll",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Final Payroll & Documents",
                            SecureUrlKey = "ef60060775c8477d9d752e89ad3b00d9",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 36,
                            Action = "Records",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Employee Records",
                            SecureUrlKey = "979bd62f6aab42fe8bddc335d45b494b",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 37,
                            Action = "Leave",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Leave Management",
                            SecureUrlKey = "5cea906901df44c48e290e7f41f9c8c4",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 38,
                            Action = "Payroll",
                            Controller = "HR",
                            IsActive = true,
                            Name = "Payroll Processing",
                            SecureUrlKey = "ea40c0743f904c3aadd89865d05eb46f",
                            SubmoduleId = 9
                        },
                        new
                        {
                            Id = 39,
                            Action = "Reviews",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Performance Reviews",
                            SecureUrlKey = "4122ebf2f1bb4e55a90e9aaccea8069a",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 40,
                            Action = "KPIs",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "KPI Tracking",
                            SecureUrlKey = "48643c8227f2431dbc9228ef6e0486f7",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 41,
                            Action = "Feedback",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Feedback & Recognition",
                            SecureUrlKey = "764af792f9534519b9ef187401117d09",
                            SubmoduleId = 10
                        },
                        new
                        {
                            Id = 42,
                            Action = "Tickets",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Ticket Management",
                            SecureUrlKey = "beeccf07aeb544faa5a78e531032d8eb",
                            SubmoduleId = 11
                        },
                        new
                        {
                            Id = 43,
                            Action = "Monitoring",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "System Monitoring",
                            SecureUrlKey = "5b27432b572f46dba6b8b5ce6db67c4e",
                            SubmoduleId = 12
                        },
                        new
                        {
                            Id = 44,
                            Action = "Inventory",
                            Controller = "ITService",
                            IsActive = true,
                            Name = "Hardware Inventory",
                            SecureUrlKey = "119ca0b3246646219d1bb0f71f6bc176",
                            SubmoduleId = 5
                        },
                        new
                        {
                            Id = 45,
                            Action = "Tickets",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Tickets",
                            SecureUrlKey = "ebe775abf3a94b80b5771c23d4bcf8a4",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 46,
                            Action = "Chat",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Live Chat",
                            SecureUrlKey = "201400b32a1a4c72a6ea283fdd6a4861",
                            SubmoduleId = 14
                        },
                        new
                        {
                            Id = 47,
                            Action = "FAQ",
                            Controller = "Support",
                            IsActive = true,
                            Name = "FAQ & Help Center",
                            SecureUrlKey = "a280f277b75744d19b4e809081e07a0f",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 48,
                            Action = "Finance",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Financial Reports",
                            SecureUrlKey = "5a28004f8e4f4ef8a8df64f94ccfda3c",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 49,
                            Action = "Employees",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Employee Insights",
                            SecureUrlKey = "c2bb36330c834888ae69a350ef4e43d6",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 50,
                            Action = "Sales",
                            Controller = "Reports",
                            IsActive = true,
                            Name = "Sales & Revenue",
                            SecureUrlKey = "2dcbc75f8fe34ebab3158d261685c678",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 51,
                            Action = "Index",
                            Controller = "Support",
                            IsActive = true,
                            Name = "Support Dashboard",
                            SecureUrlKey = "82936ad031e94f648095ac1525a267de",
                            SubmoduleId = 13
                        },
                        new
                        {
                            Id = 52,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Orders Dashboard",
                            SecureUrlKey = "fc2f53deb6b54d80bab43646e9a3e31b",
                            SubmoduleId = 8
                        },
                        new
                        {
                            Id = 53,
                            Action = "Settings",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Management",
                            SecureUrlKey = "42d287e9766c40ffb56bc7ee3cb23a2a",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 54,
                            Action = "Export",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Export",
                            SecureUrlKey = "76d2ce7d46bc47ec876074ee4b71dc1a",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 55,
                            Action = "Import",
                            Controller = "ExportImport",
                            IsActive = true,
                            Name = "Data Import",
                            SecureUrlKey = "a624f5f5fa5343c7a4fb730b7382b4c1",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 56,
                            Action = "Index",
                            Controller = "OrderReport",
                            IsActive = true,
                            Name = "Order Dashboard",
                            SecureUrlKey = "2c85f99d18594f0a840cd1637fced821",
                            SubmoduleId = 16
                        },
                        new
                        {
                            Id = 57,
                            Action = "WarehouseReport",
                            Controller = "warehouse",
                            IsActive = true,
                            Name = "Stores",
                            SecureUrlKey = "55a65c00048346129a2d631499eeacce",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 58,
                            Action = "Index",
                            Controller = "Country",
                            IsActive = true,
                            Name = "Countries",
                            SecureUrlKey = "9e1f9f0b91614259a8e4e03271b8abe6",
                            SubmoduleId = 17
                        },
                        new
                        {
                            Id = 59,
                            Action = "countries",
                            Controller = "items",
                            IsActive = true,
                            Name = "Countries and Their Items",
                            SecureUrlKey = "c9f0d1b0d94d442f8a1d666b328a8788",
                            SubmoduleId = 15
                        },
                        new
                        {
                            Id = 60,
                            Action = "Index",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Onboarding List",
                            SecureUrlKey = "ccb0b0373ee44ce59af9539f5443a7ec",
                            SubmoduleId = 19
                        },
                        new
                        {
                            Id = 61,
                            Action = "Create",
                            Controller = "Onboarding",
                            IsActive = true,
                            Name = "Create Onboarding",
                            SecureUrlKey = "289fe855779044d49cf1b9e2a9796d05",
                            SubmoduleId = 19
                        },
                        new
                        {
                            Id = 62,
                            Action = "Index",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Offboarding List",
                            SecureUrlKey = "98b0d632eefc4969af1ee20f066f5be9",
                            SubmoduleId = 20
                        },
                        new
                        {
                            Id = 63,
                            Action = "Create",
                            Controller = "Offboarding",
                            IsActive = true,
                            Name = "Create Offboarding",
                            SecureUrlKey = "14482f02833444e68b3f15f71b2b17ff",
                            SubmoduleId = 20
                        },
                        new
                        {
                            Id = 64,
                            Action = "Index",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Performance Reviews",
                            SecureUrlKey = "6d636e900173411cb687d9d67418dffd",
                            SubmoduleId = 21
                        },
                        new
                        {
                            Id = 65,
                            Action = "Create",
                            Controller = "Performance",
                            IsActive = true,
                            Name = "Add Performance Review",
                            SecureUrlKey = "d8dff33a122047b8a0701570bed6bd43",
                            SubmoduleId = 21
                        },
                        new
                        {
                            Id = 66,
                            Action = "Index",
                            Controller = "Supervisor",
                            IsActive = true,
                            Name = "Supervisors List",
                            SecureUrlKey = "89a035a67d914336af074802475cbe19",
                            SubmoduleId = 22
                        },
                        new
                        {
                            Id = 67,
                            Action = "Create",
                            Controller = "Supervisor",
                            IsActive = true,
                            Name = "Add Supervisor",
                            SecureUrlKey = "4e764a30e3b445fe9103d8180939d722",
                            SubmoduleId = 22
                        },
                        new
                        {
                            Id = 68,
                            Action = "Index",
                            Controller = "Position",
                            IsActive = true,
                            Name = "Employee Positions",
                            SecureUrlKey = "a368b309b1564f4c9812913939f25518",
                            SubmoduleId = 23
                        },
                        new
                        {
                            Id = 69,
                            Action = "Create",
                            Controller = "Position",
                            IsActive = true,
                            Name = "Create Employee Position",
                            SecureUrlKey = "857412518e544f928a32af0be317e007",
                            SubmoduleId = 23
                        },
                        new
                        {
                            Id = 70,
                            Action = "Index",
                            Controller = "Department",
                            IsActive = true,
                            Name = "Departments List",
                            SecureUrlKey = "e16e6d3460b145a1b46a63c8f71e87f3",
                            SubmoduleId = 24
                        },
                        new
                        {
                            Id = 71,
                            Action = "Create",
                            Controller = "Department",
                            IsActive = true,
                            Name = "Add Department",
                            SecureUrlKey = "76873ed2af6c4f04855aa468f35d6f5a",
                            SubmoduleId = 24
                        },
                        new
                        {
                            Id = 72,
                            Action = "Index",
                            Controller = "LeaveRequest",
                            IsActive = true,
                            Name = "Leave Requests",
                            SecureUrlKey = "7cbf6febcd51489491f92ef0de5da11b",
                            SubmoduleId = 25
                        },
                        new
                        {
                            Id = 73,
                            Action = "Create",
                            Controller = "LeaveRequest",
                            IsActive = true,
                            Name = "Submit Leave Request",
                            SecureUrlKey = "6941d08bb79041fcaf93daff171a7d0b",
                            SubmoduleId = 25
                        },
                        new
                        {
                            Id = 74,
                            Action = "Index",
                            Controller = "Employee",
                            IsActive = true,
                            Name = "Employee List",
                            SecureUrlKey = "4abaa0415db149ad96fa0bf9bf853eba",
                            SubmoduleId = 26
                        },
                        new
                        {
                            Id = 75,
                            Action = "Create",
                            Controller = "Employee",
                            IsActive = true,
                            Name = "Add Employee",
                            SecureUrlKey = "3ec849466d5c41c789961758d2620907",
                            SubmoduleId = 26
                        },
                        new
                        {
                            Id = 76,
                            Action = "Index",
                            Controller = "Notification",
                            IsActive = true,
                            Name = "Notification List",
                            SecureUrlKey = "65e331006b3042eaaa866f4a7ac29461",
                            SubmoduleId = 27
                        },
                        new
                        {
                            Id = 77,
                            Action = "Add",
                            Controller = "Notification",
                            IsActive = true,
                            Name = "Create Notification",
                            SecureUrlKey = "2f50dea083a745449c0dbe67d87e492b",
                            SubmoduleId = 27
                        },
                        new
                        {
                            Id = 78,
                            Action = "Index",
                            Controller = "Notification",
                            IsActive = true,
                            Name = "Notification Settings",
                            SecureUrlKey = "960b9a44d68145589a901d8d6282f005",
                            SubmoduleId = 28
                        },
                        new
                        {
                            Id = 79,
                            Action = "Edit",
                            Controller = "Notification",
                            IsActive = true,
                            Name = "Edit Settings",
                            SecureUrlKey = "f6eed4886b3e4f6891fe7b6d15096470",
                            SubmoduleId = 28
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTyepe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Read"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Create"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Update"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delete"
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PageId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SubModuleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-people",
                            ModuleId = 1,
                            Name = "Users",
                            Title = ""
                        },
                        new
                        {
                            Id = 2,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield-lock",
                            ModuleId = 1,
                            Name = "Permissions",
                            Title = ""
                        },
                        new
                        {
                            Id = 3,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-badge",
                            ModuleId = 2,
                            Name = "Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 4,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-check",
                            ModuleId = 2,
                            Name = "Assign Roles",
                            Title = ""
                        },
                        new
                        {
                            Id = 5,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-box-seam",
                            ModuleId = 3,
                            Name = "Inventory",
                            Title = ""
                        },
                        new
                        {
                            Id = 6,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-boxes",
                            ModuleId = 3,
                            Name = "Stock Levels",
                            Title = ""
                        },
                        new
                        {
                            Id = 7,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-plus",
                            ModuleId = 4,
                            Name = "New Order",
                            Title = ""
                        },
                        new
                        {
                            Id = 8,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cart-check",
                            ModuleId = 4,
                            Name = "Order History",
                            Title = ""
                        },
                        new
                        {
                            Id = 9,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-cash-stack",
                            ModuleId = 5,
                            Name = "Payroll Dashboard",
                            Title = ""
                        },
                        new
                        {
                            Id = 10,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-person",
                            ModuleId = 5,
                            Name = "Employee Records",
                            Title = ""
                        },
                        new
                        {
                            Id = 11,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-ticket-detailed",
                            ModuleId = 6,
                            Name = "Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 12,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer",
                            ModuleId = 6,
                            Name = "System Monitoring",
                            Title = ""
                        },
                        new
                        {
                            Id = 13,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-headset",
                            ModuleId = 7,
                            Name = "Support Tickets",
                            Title = ""
                        },
                        new
                        {
                            Id = 14,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-chat-dots",
                            ModuleId = 7,
                            Name = "Live Chat",
                            Title = ""
                        },
                        new
                        {
                            Id = 15,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-file-earmark-bar-graph",
                            ModuleId = 8,
                            Name = "Reports",
                            Title = ""
                        },
                        new
                        {
                            Id = 16,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-speedometer2",
                            ModuleId = 8,
                            Name = "Dashboards",
                            Title = ""
                        },
                        new
                        {
                            Id = 17,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-gear",
                            ModuleId = 9,
                            Name = "General Settings",
                            Title = ""
                        },
                        new
                        {
                            Id = 18,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-shield",
                            ModuleId = 9,
                            Name = "Security",
                            Title = ""
                        },
                        new
                        {
                            Id = 19,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-plus",
                            ModuleId = 10,
                            Name = "Onboarding",
                            Title = ""
                        },
                        new
                        {
                            Id = 20,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-dash",
                            ModuleId = 10,
                            Name = "Offboarding",
                            Title = ""
                        },
                        new
                        {
                            Id = 21,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-bar-chart-line",
                            ModuleId = 10,
                            Name = "Performance",
                            Title = ""
                        },
                        new
                        {
                            Id = 22,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-person-badge",
                            ModuleId = 10,
                            Name = "Supervisor",
                            Title = ""
                        },
                        new
                        {
                            Id = 23,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-briefcase",
                            ModuleId = 10,
                            Name = "Employee Position",
                            Title = ""
                        },
                        new
                        {
                            Id = 24,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-building",
                            ModuleId = 10,
                            Name = "Department",
                            Title = ""
                        },
                        new
                        {
                            Id = 25,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-calendar-check",
                            ModuleId = 10,
                            Name = "Leave Request",
                            Title = ""
                        },
                        new
                        {
                            Id = 26,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-people",
                            ModuleId = 10,
                            Name = "Employees",
                            Title = ""
                        },
                        new
                        {
                            Id = 27,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-megaphone",
                            ModuleId = 11,
                            Name = "Notification Service",
                            Title = ""
                        },
                        new
                        {
                            Id = 28,
                            Action = "",
                            Controller = "",
                            IconClass = "bi-gear",
                            ModuleId = 11,
                            Name = "Notification Settings",
                            Title = ""
                        });
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ContractSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.ExportImportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowNullValues")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CsvDelimiter")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue(",");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("yyyy-MM-dd");

                    b.Property<string>("DefaultExportFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("XLSX");

                    b.Property<bool>("EnableExport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableImport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IncludeHeaders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxExportRows")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10000);

                    b.Property<int>("MaxImportFileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10485760);

                    b.Property<string>("SupportedExportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedImportFormats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ValidateImportData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("ExportImportSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Settings.NotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EnableEmailNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnablePushNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableSmsNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UnhelpfulVotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FAQS");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RespondedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SupportTicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RespondedByUserId");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportResponse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Medium");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Open");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("General");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<double?>("DefaultHeight")
                        .HasColumnType("float");

                    b.Property<double?>("DefaultThickness")
                        .HasColumnType("float");

                    b.Property<double?>("DefaultWidth")
                        .HasColumnType("float");

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("GlassType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("HasDimensions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Clear");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CurrentStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("DescriptionAr")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLaminated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsToughened")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ManufacturingCountryId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rank")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("Rank");

                    b.Property<double>("Thickness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(4.0);

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Piece");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturingCountryId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("MainWarehouses", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressAr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressEn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MainWarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainWarehouseId");

                    b.HasIndex("NameAr")
                        .IsUnique();

                    b.HasIndex("NameEn")
                        .IsUnique();

                    b.ToTable("SubWarehouses", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.LeaveRequest", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Offboarding", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Onboarding", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.HR.Supervisor", null)
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Performance", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.HasOne("Factory.DAL.Models.HR.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.ITSetupModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("ITSetup")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.ITSetupModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OrientationModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Orientation")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.OrientationModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.PreboardingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Preboarding")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.PreboardingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.TrainingModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.OnBoarding.OnboardingProcess", "OnboardingProcess")
                        .WithOne("Training")
                        .HasForeignKey("Factory.DAL.Models.OnBoarding.TrainingModule", "OnboardingProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnboardingProcess");
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.OrderItem", b =>
                {
                    b.HasOne("Factory.DAL.Models.OrderList.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Page", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.SubModule", "Submodule")
                        .WithMany("Pages")
                        .HasForeignKey("SubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submodule");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.RolePermission", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Permission.Page", "Page")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Permission.PermissionTyepe", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Permission.SubModule", "SubModule")
                        .WithMany()
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Page");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.HasOne("Factory.DAL.Models.Permission.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.FAQS", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportResponse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "RespondedByUser")
                        .WithMany()
                        .HasForeignKey("RespondedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Factory.DAL.Models.Support.SupportTicket", "SupportTicket")
                        .WithMany("Responses")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RespondedByUser");

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("Categories")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Item", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Country", "ManufacturingCountry")
                        .WithMany()
                        .HasForeignKey("ManufacturingCountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ManufacturingCountry");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.SubWarehouse", b =>
                {
                    b.HasOne("Factory.DAL.Models.Warehouses.MainWarehouse", "MainWarehouse")
                        .WithMany("SubWarehouses")
                        .HasForeignKey("MainWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainWarehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Factory.DAL.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Employee", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("Factory.DAL.Models.HR.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Factory.DAL.Models.OnBoarding.OnboardingProcess", b =>
                {
                    b.Navigation("ITSetup")
                        .IsRequired();

                    b.Navigation("Orientation")
                        .IsRequired();

                    b.Navigation("Preboarding")
                        .IsRequired();

                    b.Navigation("Training")
                        .IsRequired();
                });

            modelBuilder.Entity("Factory.DAL.Models.OrderList.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.Module", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.PermissionTyepe", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Factory.DAL.Models.Permission.SubModule", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Factory.DAL.Models.Support.SupportTicket", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Factory.DAL.Models.Warehouses.MainWarehouse", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("SubWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
