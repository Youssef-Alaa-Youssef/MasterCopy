@model IEnumerable<Factory.DAL.Models.Warehouses.Item>
@{
    ViewData["Title"] = "View Items";
    Layout = "_LogedUser";
}

<div class="container-fluid card shadow-sm p-3">
    @await Html.PartialAsync("ErrorSummaryPartial")
    @await Html.PartialAsync("_PageTitle")

    <form id="antiForgeryForm" style="display: none;">
        @Html.AntiForgeryToken()
    </form>

    <div class="col-md-3 mb-2">
        <a class="btn btn-outline-secondary" asp-controller="Items" asp-action="AddItem" asp-route-CategoryId="@ViewBag.CategoryId">
            <i class="bi bi-plus"></i> Add Item
        </a>
    </div>

    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Delete Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this item?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Code Number</th>
                    <th>Rack</th>
                    <th>Current Stock</th>
                    <th>Name (EN)</th>
                    <th>Name (AR)</th>
                    <th>Status</th>
                    <th>Take</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Any())
                {
                    int count = 1;
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@count</td>
                            <td>@item.CodeNumber</td>
                            <td>@item.Rank</td>
                            <td>@item.CurrentStock</td>
                            <td>@item.NameEn</td>
                            <td>@item.NameAr</td>
                            <td>
                                @if (item.IsLowStock())
                                {
                                    <span class="badge bg-danger">Low Stock</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">In Stock</span>
                                }
                            </td>
                            <td>
                                <div class="input-group">
                                    <input type="number" class="form-control quantity-input" data-item-id="@item.Id" min="1" max="@item.CurrentStock" />
                                    <button class="btn btn-outline-primary save-btn" data-item-id="@item.Id">
                                        <i class="bi bi-save"></i> 
                                    </button>
                                </div>
                            </td>
                            <td>
                                <a href="@Url.Action("Details", "Items", new { id = item.Id })" class="btn btn-outline-info btn-sm">
                                    <i class="bi bi-eye"></i> Details
                                </a>
                                <a href="@Url.Action("EditItem", "Items", new { id = item.Id })" class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-list"></i> Edit
                                </a>
                                <button class="btn btn-outline-danger btn-sm" data-bs-toggle="modal" data-bs-target="#deleteModal" data-item-id="@item.Id">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                        count++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="17" class="text-center">No items found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteButton = document.getElementById('confirmDelete');
        let deleteItemId;

        deleteModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            deleteItemId = button.getAttribute('data-item-id');
        });

        confirmDeleteButton.addEventListener('click', function () {
            fetch(`/Items/DeleteItem/${deleteItemId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value
                }
            }).then(response => {
                if (response.ok) {
                    toastr.success('Item deleted successfully.');
                    window.location.reload();
                } else {
                    toastr.error('Failed to delete item.');
                }
            }).catch(error => {
                toastr.error('An error occurred while deleting the item.');
            });
        });

        $(document).ready(function () {
            $('.save-btn').on('click', function () {
                const itemId = $(this).data('item-id');
                const quantityInput = $(this).closest('tr').find('.quantity-input');
                const quantity = quantityInput.val();
            const maxQuantity = quantityInput.attr('max');

                if (!quantity || quantity <= 0) {
                    toastr.error('Please enter a valid quantity.');
                    return;
                }
                if (quantity > maxQuantity) {
                        toastr.error('The quantity entered cannot be greater than the available stock.');
                        return;
                    }
                fetch(`/Items/UpdateStocks/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ quantity: quantity })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        toastr.success('Stock updated successfully!');
                        window.location.reload();
                    } else {
                        toastr.error('Failed to update stock: ' + data.message);
                    }
                })
                .catch(error => {
                    toastr.error('An error occurred while updating the stock.');
                });
            });
        });
    </script>
}