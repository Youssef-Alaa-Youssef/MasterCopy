@model List<Factory.DAL.Models.Notifications.Notification>
@using System.Globalization

@{
    ViewData["Title"] = Localizer["NotificationsTitle"];
    Layout = "_LogedUser";
    var isArabic = CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "ar";
}

<div class="container-fluid card shadow-sm p-3">
    @await Html.PartialAsync("ErrorSummaryPartial")
    @await Html.PartialAsync("_PageTitle")

    <div class="text-end mb-3">
        <a asp-action="Add" class="btn btn-outline-primary">
            <i class="bi bi-plus-circle me-2"></i> @Localizer["AddNewNotification"]
        </a>
    </div>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info" role="alert">
            <i class="bi bi-info-circle me-2"></i> @Localizer["NoNotificationsAvailable"]
        </div>
    }
    else
    {
        <div class="mb-4">
            <input type="text" class="form-control" id="searchInput" 
                   placeholder="@Localizer["SearchPlaceholder"]" 
                   aria-label="@Localizer["SearchLabel"]">
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>@Localizer["Number"]</th>
                        <th>@Localizer["Message"]</th>
                        <th>@Localizer["Description"]</th>
                        <th>@Localizer["Type"]</th>
                        <th>@Localizer["Icon"]</th>
                        <th>@Localizer["CreatedAt"]</th>
                        <th>@Localizer["User"]</th>
                        <th>@Localizer["Status"]</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                        var notification = Model[i];
                        <tr>
                            <td>@(i + 1)</td>
                            <td>@notification.Message</td>
                            <td>@notification.Description</td>
                            <td>
                                <span class="badge bg-@GetBadgeClass(notification.Type)">
                                    @Localizer[notification.Type]
                                </span>
                            </td>
                            <td>
                                <i class="bi @GetNotificationIcon(notification.Type)"></i>
                            </td>
                            <td>@notification.CreatedAt.ToString("g")</td>
                            <td>@notification.UserId</td>
                            <td>
                                @if (notification.IsRead)
                                {
                                    <span class="badge bg-success">@Localizer["Read"]</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning text-dark">@Localizer["Unread"]</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        document.getElementById('searchInput')?.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });
    </script>
}

@functions {
    private string GetBadgeClass(string notificationType)
    {
        return notificationType switch
        {
            "Success" => "success",
            "Warning" => "warning",
            "Error" => "danger",
            "Info" => "info",
            _ => "secondary"
        };
    }

    private string GetNotificationIcon(string notificationType)
    {
        return notificationType switch
        {
            "Success" => "bi-check-circle",
            "Warning" => "bi-exclamation-triangle",
            "Error" => "bi-x-circle",
            "Info" => "bi-info-circle",
            _ => "bi-bell"
        };
    }
}