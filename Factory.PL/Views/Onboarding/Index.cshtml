@using Factory.DAL.Enums
@model IEnumerable<Factory.DAL.Models.OnBoarding.OnboardingProcess>

@{
    ViewData["Title"] = "Onboarding Processes";
    Layout = "_LogedUser";

}

<div class="container-fluid card shadow-sm p-3 fade-in">
    @await Html.PartialAsync("ErrorSummaryPartial")
    @await Html.PartialAsync("_PageTitle")

    <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">Onboarding Status Distribution</h5>
        </div>
        <div class="card-body">
            <canvas id="statusChart" width="400" height="200"></canvas>
        </div>
    </div>

    <div class="card shadow">
        <div class="card-header bg-secondary text-white">
            <h5 class="card-title mb-0">Onboarding Processes</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Employee Name</th>
                        <th>Start Date</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var process in Model)
                    {
                        <tr>
                            <td>@process.EmployeeName</td>
                            <td>@process.StartDate.ToShortDateString()</td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(process.Status)">
                                    @process.Status
                                </span>
                            </td>
                            <td>
                                <a asp-action="Details" asp-route-id="@process.Id" class="btn btn-info btn-sm">Details</a>
                                <a asp-action="Edit" asp-route-id="@process.Id" class="btn btn-warning btn-sm">Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>

        const statusChartCtx = document.getElementById('statusChart').getContext('2d');
        const statusChart = new Chart(statusChartCtx, {
            type: 'pie',
            data: {
                labels: ['Not Started', 'In Progress', 'Completed'],
                datasets: [{
                    label: 'Onboarding Status',
                    data: [@Model.Count(p => p.Status == OnboardingStatus.NotStarted),
        @Model.Count(p => p.Status == OnboardingStatus.InProgress),
        @Model.Count(p => p.Status == OnboardingStatus.Completed)],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.6)',
                        'rgba(54, 162, 235, 0.6)',
                        'rgba(75, 192, 192, 0.6)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Onboarding Status Distribution'
                    }
                }
            }
        });
    </script>
}

@functions {
    public string GetStatusBadgeClass(OnboardingStatus status)
    {
        return status switch
        {
            OnboardingStatus.NotStarted => "bg-danger",
            OnboardingStatus.InProgress => "bg-warning",
            OnboardingStatus.Completed => "bg-success",
            _ => "bg-secondary"
        };
    }
}