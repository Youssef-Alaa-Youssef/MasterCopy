@model Factory.PL.ViewModels.Permissions.RolePermissionViewModel
@{
    ViewData["Title"] = "Role Permissions Management";
    Layout = "_LogedUser";
}

<div class="container-fluid card  shadow-sm p-3">
    @await Html.PartialAsync("ErrorSummaryPartial")
    @await Html.PartialAsync("_PageTitle")

    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-body">
                    <div class="mb-3">
                        <label for="roleSelect" class="form-label fw-bold">Select Role</label>
                        <select id="roleSelect" class="form-select form-select-lg">
                            <option value="">-- Choose a Role --</option>
                            @foreach (var role in Model.Roles)
                            {
                                <option value="@role.Value">@role.Text</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <!-- Permissions Card -->
            <div class="card" id="permissionsCard" style="display: none;">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-shield-lock me-2"></i>Permissions
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Loading Spinner -->
                    <div id="loadingSpinner" class="text-center py-5">
                        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3">Loading permissions...</p>
                    </div>

                    <!-- Permissions Tree -->
                    <div id="permissionsTree" class="d-none"></div>
                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <div id="permissionSummary" class="text-muted">
                            <span id="totalPermissions">0</span> permissions available, <span id="selectedPermissions">0</span> selected
                        </div>
                        <button id="btnSavePermissions" class="btn btn-outline-success btn-lg" disabled>
                            Save Permissions
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const state = {
                roleId: '',
                permissions: [],
                selectedPermissions: 0
            };

            const elements = {
                roleSelect: document.getElementById('roleSelect'),
                permissionsCard: document.getElementById('permissionsCard'),
                loadingSpinner: document.getElementById('loadingSpinner'),
                permissionsTree: document.getElementById('permissionsTree'),
                btnSavePermissions: document.getElementById('btnSavePermissions'),
                permissionSummary: document.getElementById('permissionSummary'),
                totalPermissions: document.getElementById('totalPermissions'),
                selectedPermissions: document.getElementById('selectedPermissions')
            };

            // Event Listeners
            elements.roleSelect.addEventListener('change', handleRoleChange);
            elements.btnSavePermissions.addEventListener('click', handleSavePermissions);

            // Handle Role Change
            function handleRoleChange() {
                const roleId = elements.roleSelect.value;
                if (!roleId) {
                    elements.permissionsCard.style.display = 'none';
                    elements.btnSavePermissions.disabled = true;
                    return;
                }

                state.roleId = roleId;
                elements.permissionsCard.style.display = 'block';
                elements.loadingSpinner.classList.remove('d-none');
                elements.permissionsTree.classList.add('d-none');
                elements.btnSavePermissions.disabled = true;

                fetchPermissions(roleId);
            }

            // Fetch Permissions
            async function fetchPermissions(roleId) {
                try {
                    const response = await fetch(`@Url.Action("GetRolePermissions")?roleId=${roleId}`);
                    if (!response.ok) throw new Error('Failed to fetch permissions');
                    const data = await response.json();
                    renderPermissions(data);
                } catch (error) {
                    console.error('Error fetching permissions:', error);
                    showNotification('Failed to load permissions. Please try again.', 'danger');
                } finally {
                    elements.loadingSpinner.classList.add('d-none');
                    elements.permissionsTree.classList.remove('d-none');
                }
            }

            // Render Permissions
            function renderPermissions(data) {
                if (!data || !data.modules) {
                    elements.permissionsTree.innerHTML = '<div class="alert alert-info">No permissions found.</div>';
                    return;
                }

                let html = '<div class="accordion" id="permissionsAccordion">';
                data.modules.forEach((module, moduleIndex) => {
                    html += `
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="moduleHeading-${moduleIndex}">
                            <button class="accordion-button bg-transparent" type="button" data-bs-toggle="collapse" data-bs-target="#moduleCollapse-${moduleIndex}" aria-expanded="true" aria-controls="moduleCollapse-${moduleIndex}">
                                <i class="bi bi-folder me-2"></i>${module.moduleName}
                            </button>
                            </h2>
                            <div id="moduleCollapse-${moduleIndex}" class="accordion-collapse collapse" aria-labelledby="moduleHeading-${moduleIndex}" data-bs-parent="#permissionsAccordion">
                                <div class="accordion-body">
                                    ${renderSubmodules(module.subModules, moduleIndex)}
                                </div>
                            </div>
                        </div>`;
                });
                html += '</div>';

                elements.permissionsTree.innerHTML = html;
                addCheckboxEventListeners();
                updatePermissionSummary();
            }

            // Render Submodules
            function renderSubmodules(subModules, moduleIndex) {
                if (!subModules || subModules.length === 0) {
                    return '<div class="text-muted">No submodules found.</div>';
                }

                let html = '<div class="accordion" id="submodulesAccordion">';
                subModules.forEach((subModule, subIndex) => {
                    html += `
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="submoduleHeading-${moduleIndex}-${subIndex}">
                                <button class="accordion-button bg-transparent" type="button" data-bs-toggle="collapse" data-bs-target="#submoduleCollapse-${moduleIndex}-${subIndex}" aria-expanded="true" aria-controls="submoduleCollapse-${moduleIndex}-${subIndex}">
                                    <i class="bi bi-folder2 me-2"></i>${subModule.subModuleName}
                                </button>
                            </h2>
                            <div id="submoduleCollapse-${moduleIndex}-${subIndex}" class="accordion-collapse collapse" aria-labelledby="submoduleHeading-${moduleIndex}-${subIndex}" data-bs-parent="#submodulesAccordion">
                                <div class="accordion-body">
                                    ${renderPages(subModule.pages, moduleIndex, subIndex)}
                                </div>
                            </div>
                        </div>`;
                });
                html += '</div>';
                return html;
            }

            // Render Pages
            function renderPages(pages, moduleIndex, subIndex) {
                if (!pages || pages.length === 0) {
                    return '<div class="text-muted">No pages found.</div>';
                }

                let html = '<div class="accordion" id="pagesAccordion">';
                pages.forEach((page, pageIndex) => {
                    html += `
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="pageHeading-${moduleIndex}-${subIndex}-${pageIndex}">
                                <button class="accordion-button bg-transparent" type="button" data-bs-toggle="collapse" data-bs-target="#pageCollapse-${moduleIndex}-${subIndex}-${pageIndex}" aria-expanded="true" aria-controls="pageCollapse-${moduleIndex}-${subIndex}-${pageIndex}">
                                    <i class="bi bi-file-earmark-text me-2"></i>${page.pageName}
                                </button>
                            </h2>
                            <div id="pageCollapse-${moduleIndex}-${subIndex}-${pageIndex}" class="accordion-collapse collapse" aria-labelledby="pageHeading-${moduleIndex}-${subIndex}-${pageIndex}" data-bs-parent="#pagesAccordion">
                                <div class="accordion-body">
                                    ${renderPermissionsList(page.permissions)}
                                </div>
                            </div>
                        </div>`;
                });
                html += '</div>';
                return html;
            }

            // Render Permissions List
            function renderPermissionsList(permissions) {
                if (!permissions || permissions.length === 0) {
                    return '<div class="text-muted">No permissions available.</div>';
                }

                let html = '<div class="d-flex flex-wrap gap-3">';
                permissions.forEach(permission => {
                    html += `
                        <div class="form-check form-switch">
                            <input type="checkbox" class="form-check-input permission-checkbox" id="perm-${permission.permissionId}" data-permission-id="${permission.permissionId}" ${permission.isGranted ? 'checked' : ''}>
                            <label class="form-check-label" for="perm-${permission.permissionId}">${permission.permissionName}</label>
                        </div>`;
                });
                html += '</div>';
                return html;
            }

            // Add Checkbox Event Listeners
            function addCheckboxEventListeners() {
                document.querySelectorAll('.permission-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        updatePermissionSummary();
                        elements.btnSavePermissions.disabled = false;
                    });
                });
            }

            // Update Permission Summary
            function updatePermissionSummary() {
                const total = document.querySelectorAll('.permission-checkbox').length;
                const selected = document.querySelectorAll('.permission-checkbox:checked').length;

                elements.totalPermissions.textContent = total;
                elements.selectedPermissions.textContent = selected;
            }

            // Handle Save Permissions
            async function handleSavePermissions() {
                const selectedPermissions = Array.from(document.querySelectorAll('.permission-checkbox:checked'))
                    .map(checkbox => {
                        const permissionId = checkbox.getAttribute('data-permission-id');
                        return {
                            PermissionId: permissionId,
                            IsGranted: true,
                        };
                    });

                if (selectedPermissions.length === 0) {
                    showNotification('No permissions selected.', 'warning');
                    return;
                }

                const model = {
                    RoleId: state.roleId,
                    Permissions: selectedPermissions,
                };

                try {
                    const response = await fetch('@Url.Action("SaveRolePermissions")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(model)
                    });

                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Failed to save permissions');
                    showNotification('Permissions saved successfully!', 'success');
                } catch (error) {
                    console.error('Error saving permissions:', error);
                    showNotification('Failed to save permissions. Please try again.', 'danger');
                }
            }

            // Show Notification
            function showNotification(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                alert.role = 'alert';
                alert.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`;
                document.body.appendChild(alert);

                setTimeout(() => alert.remove(), 5000);
            }
        });
    </script>
}